import { NextResponse } from 'next/server';
import pool from '@/app/lib/db';
import { sendTelegramMessage } from '@/app/lib/telegram';

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { masterId } = await request.json();
    
    if (!masterId) {
      return NextResponse.json(
        { error: 'Master ID is required' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
    const masterInfo = await pool.query(
      'SELECT name, specialization FROM masters WHERE id = $1 AND is_active = true',
      [masterId]
    );

    if (masterInfo.rows.length === 0) {
      return NextResponse.json(
        { error: 'Master not found or inactive' },
        { status: 404 }
      );
    }

    const master = masterInfo.rows[0];

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    const result = await pool.query(
      `UPDATE applications 
       SET master_id = $1, assigned_at = NOW()
       WHERE id = $2
       RETURNING *`,
      [masterId, params.id]
    );

    if (result.rows.length === 0) {
      return NextResponse.json(
        { error: 'Application not found' },
        { status: 404 }
      );
    }

    const application = result.rows[0];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramMessage = `
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${application.id}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${application.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}
‚úâÔ∏è Email: ${application.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîß –£—Å–ª—É–≥–∞: ${application.service}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${application.message}

üë®‚Äçüîß <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä:</b>
üë§ ${master.name}
üõ†Ô∏è ${master.specialization}

#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ_–∑–∞—è–≤–∫–∏
    `.trim();

    try {
      await sendTelegramMessage(telegramMessage);
      console.log('Telegram notification sent about master assignment');
    } catch (telegramError) {
      console.error('Failed to send Telegram notification:', telegramError);
    }

    return NextResponse.json(result.rows[0]);
  } catch (error) {
    console.error('Database Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to assign master' },
      { status: 500 }
    );
  }
} 