import { NextResponse } from 'next/server';
import pool from '@/app/lib/db';
import { sendTelegramMessage } from '@/app/lib/telegram';

export async function GET() {
  try {
    const result = await pool.query(`
      SELECT * FROM applications
      ORDER BY created_at DESC
    `);
    
    return NextResponse.json(result.rows);
  } catch (error) {
    console.error('Database Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch applications' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    console.log('API received data:', body);

    const { name, phone, email, techType: service, description: message } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone || !service || !message) {
      console.error('Missing required fields:', { name, phone, service, message });
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
‚úâÔ∏è Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîß –£—Å–ª—É–≥–∞: ${service}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}

üë®‚Äçüîß –°—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω

#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    try {
      await sendTelegramMessage(telegramMessage);
      console.log('Telegram notification sent successfully');
    } catch (telegramError) {
      console.error('Failed to send Telegram notification:', telegramError);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('Saving to database...');
    const result = await pool.query(
      `INSERT INTO applications (name, phone, email, service, message, status)
       VALUES ($1, $2, $3, $4, $5, 'pending')
       RETURNING *`,
      [name, phone, email || null, service, message]
    );

    console.log('Saved to database:', result.rows[0]);
    return NextResponse.json(result.rows[0]);
  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to process application' },
      { status: 500 }
    );
  }
} 