import React from "react";
import styled from "styled-components";
import { useForm } from "react-hook-form";
import { Wrapper } from "../Wrapper/Wrapper";
import Title from "../Title/Title";

export const FeedbackCont = styled.div`
  border-radius: 20px;
  width: 898px;
  height: 1104px;
  background: #0b5c7e;
  display: flex;
  align-items: center;
  flex-direction: column;
`;

export const FeedbackTitle = styled.p`
  font-family: var(--font-family);
  font-weight: 400;
  font-size: 45px;
  color: #fff;
  margin: 40px 0;
  text-align: center;
`;

export const FeedbackFormCont = styled.form`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 20px;
`;

export const FeedbackInput = styled.input`
  border: 1px solid #fff;
  border-radius: 20px;
  width: 786px;
  height: 89px;
  background: none;
  padding-left: 20px;

  &::placeholder {
    font-family: var(--font-family);
    font-weight: 400;
    font-size: 20px;
    color: #a5a5a5;
  }
`;

export const FeedbackTextarea = styled.textarea`
  border: 1px solid #fff;
  border-radius: 20px;
  width: 766px;
  height: 283px;
  padding: 20px;
  background: none;

  &::placeholder {
    font-family: var(--font-family);
    font-weight: 400;
    font-size: 20px;
    color: #a5a5a5;
  }
`;

export const FeedbackButton = styled.button`
  border-radius: 10px;
  width: 215px;
  height: 51px;
  background: #2573d8;
  font-family: var(--font-family);
  font-weight: 400;
  font-size: 20px;
  color: #fff;
  cursor: pointer;
  transition: 0.3s;
  border: none;

  &:hover {
    background: #1954a0;
  }
`;

const ErrorMessage = styled.span`
  color: #ff6b6b;
  font-size: 14px;
  margin-top: -10px;
  margin-bottom: 10px;
  align-self: flex-start;
  padding-left: 20px;
`;

const FeedbackForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm();

  const SMSRU_API_KEY = "67BD4C16-9ED1-FDE9-0838-3723174F8670"; // üîπ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ API-–∫–ª—é—á –æ—Ç SMS.RU

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
  const sendSMS = async (phone, message) => {
    const url = `https://sms.ru/sms/send?api_id=${SMSRU_API_KEY}&to=${phone}&msg=${encodeURIComponent(message)}&json=1`;

    try {
      const response = await fetch(url);
      const result = await response.json();
      console.log("–û—Ç–≤–µ—Ç –æ—Ç SMS.RU:", result);
      return result;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS:", error);
      return null;
    }
  };

  const onSubmit = async (data) => {
    const message = 
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n` +
      `–ò–º—è: ${data.name}\n` +
      `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${data.phone}\n` +
      `–ü–æ—á—Ç–∞: ${data.email || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}\n` +
      `–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: ${data.techType}\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${data.description}`;

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
      const smsResult = await sendSMS(data.phone, message);

      if (smsResult && smsResult.status === "OK") {
        console.log("SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
      } else {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS:", smsResult);
      }

      reset();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:", error);
    }
  };

  return (
    <Wrapper>
      <Title>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</Title>
      <FeedbackCont>
        <FeedbackTitle>RemTopia</FeedbackTitle>
        <FeedbackFormCont onSubmit={handleSubmit(onSubmit)} noValidate>
          <FeedbackInput
            placeholder="–ò–º—è"
            {...register("name", { required: "–ü–æ–ª–µ '–ò–º—è' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" })}
          />
          {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}

          <FeedbackInput
            placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            {...register("phone", {
              required: "–ü–æ–ª–µ '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
            })}
          />
          {errors.phone && <ErrorMessage>{errors.phone.message}</ErrorMessage>}

          <FeedbackInput
            placeholder="–ü–æ—á—Ç–∞ ( –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ )"
            {...register("email", {
              pattern: {
                value: /^\S+@\S+$/i,
                message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã",
              },
            })}
          />
          {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}

          <FeedbackInput
            placeholder="–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏"
            {...register("techType", {
              required: "–ü–æ–ª–µ '–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
            })}
          />
          {errors.techType && (
            <ErrorMessage>{errors.techType.message}</ErrorMessage>
          )}

          <FeedbackTextarea
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            {...register("description", {
              required: "–ü–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
            })}
          />
          {errors.description && (
            <ErrorMessage>{errors.description.message}</ErrorMessage>
          )}

          <FeedbackButton type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</FeedbackButton>
        </FeedbackFormCont>
      </FeedbackCont>
    </Wrapper>
  );
};

export default FeedbackForm;
