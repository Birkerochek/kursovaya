"use client";
import React from "react";
import styled from "styled-components";
import { useForm, SubmitHandler, Controller } from "react-hook-form";
import { PatternFormat } from "react-number-format";
import { sendTelegramMessage } from "@/app/lib/telegram";
import { useSession } from "next-auth/react";
import AuthButton from "../AuthButton/AuthButton";

const FormContainer = styled.div`
  border-radius: 20px;
  background: #0b5c7e;
  padding: 20px;
  width: 100%;
  max-width: 500px;
`;
const NoForm = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 500px;
  flex-direction:column;
`
const NoAuthorizationText = styled.p`
  font-family: var(--font-family);
  font-weight: 400;
  font-size: 20px;
  color: #e5e5e5;
`
const FormTitle = styled.h3`
  font-family: var(--font-family);
  font-weight: 400;
  font-size: 28px;
  color: #fff;
  margin: 20px 0;
  text-align: center;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding: 0 20px 20px;
`;

const Input = styled.input`
  border: 1px solid #fff;
  border-radius: 15px;
  width: 92.5%;
  height: 50px;
  background: none;
  padding: 0 15px;
  color: #fff;

  &::placeholder {
    font-family: var(--font-family);
    font-weight: 400;
    font-size: 16px;
    color: #a5a5a5;
  }
`;

const Textarea = styled.textarea`
  border: 1px solid #fff;
  border-radius: 15px;
  width: 92.5%;
  height: 120px;
  padding: 15px;
  background: none;
  color: #fff;
  resize: none;

  &::placeholder {
    font-family: var(--font-family);
    font-weight: 400;
    font-size: 16px;
    color: #a5a5a5;
  }
`;

const SubmitButton = styled.button`
  border-radius: 10px;
  width: 100%;
  height: 45px;
  background: #2573d8;
  font-family: var(--font-family);
  font-weight: 400;
  font-size: 18px;
  color: #fff;
  border: none;
  cursor: pointer;
  transition: 0.3s;

  &:hover {
    background: #1954a0;
  }
`;

const ErrorMessage = styled.span`
  color: #ff6b6b;
  font-size: 14px;
  margin-top: -10px;
`;

interface FormData {
  name: string;
  phone: string;
  email?: string;
  techType: string;
  description: string;
}

const ModalFeedbackForm: React.FC = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    control
  } = useForm<FormData>();
const {data: session} = useSession()
  const onSubmit: SubmitHandler<FormData> = async (data) => {
    try {
      const response = await fetch("/api/applications", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
  
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
      }

      const telegramMessage = `
      üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
      
      üë§ –ò–º—è: ${data.name}
      üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
      ${data.email ? `üìß Email: ${data.email}` : ''}
      üîß –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: ${data.techType}
      üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${data.description}
          `.trim();
      
      await sendTelegramMessage(telegramMessage);
      reset();
      alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
    } catch (error) {
      console.error("Error submitting application:", error);
      alert(
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${
          error instanceof Error ? error.message : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        }`
      );
    }
  };

  return (
    <FormContainer>
      <FormTitle>–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</FormTitle>
      {!session ?(
        <NoForm>
          <NoAuthorizationText>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</NoAuthorizationText>
          <AuthButton/>

        </NoForm>
      )
    :
    (
      <Form onSubmit={handleSubmit(onSubmit)} noValidate>
        <Input
          placeholder="–ò–º—è"
          {...register("name", { required: "–ü–æ–ª–µ '–ò–º—è' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" })}
        />
        {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}

        <Controller
          name="phone"
          control={control} 
          rules={{
            required: "–ü–æ–ª–µ '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
            pattern: {
              value: /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/,
              message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            }
          }}
          render={({ field }) => (
            <Input
              as={PatternFormat}
              format="+7 (###) ###-##-##"
              placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              value={field.value}
              onValueChange={(values) => {
                field.onChange(values.formattedValue);
              }}
            />
          )}
        />
        {errors.phone && <ErrorMessage>{errors.phone.message}</ErrorMessage>}

        <Input
          placeholder="–ü–æ—á—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          {...register("email", {
            pattern: {
              value: /^\S+@\S+$/i,
              message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã",
            },
          })}
        />
        {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}

        <Input
          placeholder="–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏"
          {...register("techType", {
            required: "–ü–æ–ª–µ '–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
          })}
        />
        {errors.techType && (
          <ErrorMessage>{errors.techType.message}</ErrorMessage>
        )}

        <Textarea
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
          {...register("description", {
            required: "–ü–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
          })}
        />
        {errors.description && (
          <ErrorMessage>{errors.description.message}</ErrorMessage>
        )}

        <SubmitButton type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</SubmitButton>
      </Form>

    )}
    </FormContainer>
  );
};

export default ModalFeedbackForm;
